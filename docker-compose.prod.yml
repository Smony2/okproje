services:
  # Laravel Application - Production
  app:
    build:
      context: .
      dockerfile: docker/php/Dockerfile.prod
    container_name: okproje_app_prod
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - ./storage:/var/www/html/storage
      - ./bootstrap/cache:/var/www/html/bootstrap/cache
      - ./docker/php/production.ini:/usr/local/etc/php/conf.d/production.ini
    networks:
      - okproje_network
    depends_on:
      - db
      - redis
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Nginx Web Server - Production
  nginx:
    image: nginx:alpine
    container_name: okproje_nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./public:/var/www/html/public
      - ./docker/nginx/production.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/nginx/ssl:ro
      - ../nginx_cache:/var/cache/nginx
      - ../nginx_logs:/var/log/nginx
    networks:
      - okproje_network
    depends_on:
      - app
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # MySQL Database - Production
  db:
    image: mysql:8.0
    container_name: okproje_db_prod
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - ../mysql_data:/var/lib/mysql
      - ./docker/mysql/production.cnf:/etc/mysql/conf.d/production.cnf
      - ../backups:/backups
    networks:
      - okproje_network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    command: --default-authentication-plugin=mysql_native_password

  # Redis Cache - Production
  redis:
    image: redis:7-alpine
    container_name: okproje_redis_prod
    restart: unless-stopped
    volumes:
      - ../redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - okproje_network
    command: redis-server /usr/local/etc/redis/redis.conf
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # LiveKit for Video/Audio - Production
  livekit:
    image: livekit/livekit-server:latest
    container_name: okproje_livekit_prod
    restart: unless-stopped
    environment:
      LIVEKIT_KEYS: "${LIVEKIT_API_KEY}:${LIVEKIT_API_SECRET}"
      LIVEKIT_CONFIG: |
        port: 7880
        rtc:
          use_external_ip: true
          stun_servers:
            - stun:stun.l.google.com:19302
        turn:
          enabled: true
          domain: ${TURN_DOMAIN}
          tls_port: 5349
          udp_port: 3478
          external_tls: true
          external_tcp: true
          external_udp: true
    ports:
      - "7880:7880"
      - "7881:7881"
    networks:
      - okproje_network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # TURN Server - Production
  turn:
    image: coturn/coturn
    container_name: okproje_turn_prod
    restart: unless-stopped
    environment:
      TURN_USERNAME: ${TURN_USERNAME}
      TURN_PASSWORD: ${TURN_PASSWORD}
    volumes:
      - ./docker/turn/turnserver.conf:/etc/coturn/turnserver.conf
    ports:
      - "3478:3478/udp"
      - "3478:3478/tcp"
      - "49160-49200:49160-49200/udp"
    networks:
      - okproje_network
    command: ["-c", "/etc/coturn/turnserver.conf"]
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Backup Service
  backup:
    image: mysql:8.0
    container_name: okproje_backup
    restart: "no"
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./docker/backup/backup.sh:/backup.sh
    networks:
      - okproje_network
    depends_on:
      - db
    command: ["/bin/bash", "/backup.sh"]
    profiles:
      - backup

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: okproje_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ../prometheus_data:/prometheus
    networks:
      - okproje_network
    profiles:
      - monitoring

  # Grafana for Monitoring (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: okproje_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - ../grafana_data:/var/lib/grafana
    networks:
      - okproje_network
    profiles:
      - monitoring

volumes:
  # Artık host dizinlerini kullandığımız için named volume'lara ihtiyaç yok
  # Tüm veriler ../ dizininde saklanacak

networks:
  okproje_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
